Grammar

    0 $accept: prog $end

    1 prog: INICIO instrucciones FIN

    2 instrucciones: instruccion instrucciones
    3              | instruccion

    4 instruccion: inst_si
    5            | inst_escribir
    6            | inst_leer
    7            | inst_asign

    8 inst_escribir: ESCRIBIR PI ID PD
    9              | ESCRIBIR PI CADENA PD

   10 inst_leer: LEER PI ID PD

   11 inst_si: SI cond ENTONCES instruccion

   12 inst_asign: ID ASIGNACION exp

   13 cond: exp '<' exp
   14     | exp '>' exp
   15     | exp '=' exp

   16 exp: exp '*' exp
   17    | exp '/' exp
   18    | exp '+' exp
   19    | exp '-' exp
   20    | ID
   21    | CONST


Terminals, with rules where they appear

    $end (0) 0
    '*' (42) 16
    '+' (43) 18
    '-' (45) 19
    '/' (47) 17
    '<' (60) 13
    '=' (61) 15
    '>' (62) 14
    error (256)
    CADENA <cadena> (258) 9
    ID <cadena> (259) 8 10 12 20
    CONST <valor> (260) 21
    INICIO (261) 1
    FIN (262) 1
    SI (263) 11
    ENTONCES (264) 11
    LEER (265) 10
    ESCRIBIR (266) 8 9
    ASIGNACION (267) 12
    PD (268) 8 9 10
    PI (269) 8 9 10


Nonterminals, with rules where they appear

    $accept (22)
        on left: 0
    prog (23)
        on left: 1
        on right: 0
    instrucciones (24)
        on left: 2 3
        on right: 1 2
    instruccion <valor> (25)
        on left: 4 5 6 7
        on right: 2 3 11
    inst_escribir <valor> (26)
        on left: 8 9
        on right: 5
    inst_leer <valor> (27)
        on left: 10
        on right: 6
    inst_si <valor> (28)
        on left: 11
        on right: 4
    inst_asign <valor> (29)
        on left: 12
        on right: 7
    cond <valor> (30)
        on left: 13 14 15
        on right: 11
    exp <valor> (31)
        on left: 16 17 18 19 20 21
        on right: 12 13 14 15 16 17 18 19


State 0

    0 $accept: • prog $end

    INICIO  shift, and go to state 1

    prog  go to state 2


State 1

    1 prog: INICIO • instrucciones FIN

    ID        shift, and go to state 3
    SI        shift, and go to state 4
    LEER      shift, and go to state 5
    ESCRIBIR  shift, and go to state 6

    instrucciones  go to state 7
    instruccion    go to state 8
    inst_escribir  go to state 9
    inst_leer      go to state 10
    inst_si        go to state 11
    inst_asign     go to state 12


State 2

    0 $accept: prog • $end

    $end  shift, and go to state 13


State 3

   12 inst_asign: ID • ASIGNACION exp

    ASIGNACION  shift, and go to state 14


State 4

   11 inst_si: SI • cond ENTONCES instruccion

    ID     shift, and go to state 15
    CONST  shift, and go to state 16

    cond  go to state 17
    exp   go to state 18


State 5

   10 inst_leer: LEER • PI ID PD

    PI  shift, and go to state 19


State 6

    8 inst_escribir: ESCRIBIR • PI ID PD
    9              | ESCRIBIR • PI CADENA PD

    PI  shift, and go to state 20


State 7

    1 prog: INICIO instrucciones • FIN

    FIN  shift, and go to state 21


State 8

    2 instrucciones: instruccion • instrucciones
    3              | instruccion •

    ID        shift, and go to state 3
    SI        shift, and go to state 4
    LEER      shift, and go to state 5
    ESCRIBIR  shift, and go to state 6

    $default  reduce using rule 3 (instrucciones)

    instrucciones  go to state 22
    instruccion    go to state 8
    inst_escribir  go to state 9
    inst_leer      go to state 10
    inst_si        go to state 11
    inst_asign     go to state 12


State 9

    5 instruccion: inst_escribir •

    $default  reduce using rule 5 (instruccion)


State 10

    6 instruccion: inst_leer •

    $default  reduce using rule 6 (instruccion)


State 11

    4 instruccion: inst_si •

    $default  reduce using rule 4 (instruccion)


State 12

    7 instruccion: inst_asign •

    $default  reduce using rule 7 (instruccion)


State 13

    0 $accept: prog $end •

    $default  accept


State 14

   12 inst_asign: ID ASIGNACION • exp

    ID     shift, and go to state 15
    CONST  shift, and go to state 16

    exp  go to state 23


State 15

   20 exp: ID •

    $default  reduce using rule 20 (exp)


State 16

   21 exp: CONST •

    $default  reduce using rule 21 (exp)


State 17

   11 inst_si: SI cond • ENTONCES instruccion

    ENTONCES  shift, and go to state 24


State 18

   13 cond: exp • '<' exp
   14     | exp • '>' exp
   15     | exp • '=' exp
   16 exp: exp • '*' exp
   17    | exp • '/' exp
   18    | exp • '+' exp
   19    | exp • '-' exp

    '+'  shift, and go to state 25
    '-'  shift, and go to state 26
    '*'  shift, and go to state 27
    '/'  shift, and go to state 28
    '<'  shift, and go to state 29
    '>'  shift, and go to state 30
    '='  shift, and go to state 31


State 19

   10 inst_leer: LEER PI • ID PD

    ID  shift, and go to state 32


State 20

    8 inst_escribir: ESCRIBIR PI • ID PD
    9              | ESCRIBIR PI • CADENA PD

    CADENA  shift, and go to state 33
    ID      shift, and go to state 34


State 21

    1 prog: INICIO instrucciones FIN •

    $default  reduce using rule 1 (prog)


State 22

    2 instrucciones: instruccion instrucciones •

    $default  reduce using rule 2 (instrucciones)


State 23

   12 inst_asign: ID ASIGNACION exp •
   16 exp: exp • '*' exp
   17    | exp • '/' exp
   18    | exp • '+' exp
   19    | exp • '-' exp

    '+'  shift, and go to state 25
    '-'  shift, and go to state 26
    '*'  shift, and go to state 27
    '/'  shift, and go to state 28

    $default  reduce using rule 12 (inst_asign)


State 24

   11 inst_si: SI cond ENTONCES • instruccion

    ID        shift, and go to state 3
    SI        shift, and go to state 4
    LEER      shift, and go to state 5
    ESCRIBIR  shift, and go to state 6

    instruccion    go to state 35
    inst_escribir  go to state 9
    inst_leer      go to state 10
    inst_si        go to state 11
    inst_asign     go to state 12


State 25

   18 exp: exp '+' • exp

    ID     shift, and go to state 15
    CONST  shift, and go to state 16

    exp  go to state 36


State 26

   19 exp: exp '-' • exp

    ID     shift, and go to state 15
    CONST  shift, and go to state 16

    exp  go to state 37


State 27

   16 exp: exp '*' • exp

    ID     shift, and go to state 15
    CONST  shift, and go to state 16

    exp  go to state 38


State 28

   17 exp: exp '/' • exp

    ID     shift, and go to state 15
    CONST  shift, and go to state 16

    exp  go to state 39


State 29

   13 cond: exp '<' • exp

    ID     shift, and go to state 15
    CONST  shift, and go to state 16

    exp  go to state 40


State 30

   14 cond: exp '>' • exp

    ID     shift, and go to state 15
    CONST  shift, and go to state 16

    exp  go to state 41


State 31

   15 cond: exp '=' • exp

    ID     shift, and go to state 15
    CONST  shift, and go to state 16

    exp  go to state 42


State 32

   10 inst_leer: LEER PI ID • PD

    PD  shift, and go to state 43


State 33

    9 inst_escribir: ESCRIBIR PI CADENA • PD

    PD  shift, and go to state 44


State 34

    8 inst_escribir: ESCRIBIR PI ID • PD

    PD  shift, and go to state 45


State 35

   11 inst_si: SI cond ENTONCES instruccion •

    $default  reduce using rule 11 (inst_si)


State 36

   16 exp: exp • '*' exp
   17    | exp • '/' exp
   18    | exp • '+' exp
   18    | exp '+' exp •
   19    | exp • '-' exp

    '*'  shift, and go to state 27
    '/'  shift, and go to state 28

    $default  reduce using rule 18 (exp)


State 37

   16 exp: exp • '*' exp
   17    | exp • '/' exp
   18    | exp • '+' exp
   19    | exp • '-' exp
   19    | exp '-' exp •

    '*'  shift, and go to state 27
    '/'  shift, and go to state 28

    $default  reduce using rule 19 (exp)


State 38

   16 exp: exp • '*' exp
   16    | exp '*' exp •
   17    | exp • '/' exp
   18    | exp • '+' exp
   19    | exp • '-' exp

    $default  reduce using rule 16 (exp)


State 39

   16 exp: exp • '*' exp
   17    | exp • '/' exp
   17    | exp '/' exp •
   18    | exp • '+' exp
   19    | exp • '-' exp

    $default  reduce using rule 17 (exp)


State 40

   13 cond: exp '<' exp •
   16 exp: exp • '*' exp
   17    | exp • '/' exp
   18    | exp • '+' exp
   19    | exp • '-' exp

    '+'  shift, and go to state 25
    '-'  shift, and go to state 26
    '*'  shift, and go to state 27
    '/'  shift, and go to state 28

    $default  reduce using rule 13 (cond)


State 41

   14 cond: exp '>' exp •
   16 exp: exp • '*' exp
   17    | exp • '/' exp
   18    | exp • '+' exp
   19    | exp • '-' exp

    '+'  shift, and go to state 25
    '-'  shift, and go to state 26
    '*'  shift, and go to state 27
    '/'  shift, and go to state 28

    $default  reduce using rule 14 (cond)


State 42

   15 cond: exp '=' exp •
   16 exp: exp • '*' exp
   17    | exp • '/' exp
   18    | exp • '+' exp
   19    | exp • '-' exp

    '+'  shift, and go to state 25
    '-'  shift, and go to state 26
    '*'  shift, and go to state 27
    '/'  shift, and go to state 28

    $default  reduce using rule 15 (cond)


State 43

   10 inst_leer: LEER PI ID PD •

    $default  reduce using rule 10 (inst_leer)


State 44

    9 inst_escribir: ESCRIBIR PI CADENA PD •

    $default  reduce using rule 9 (inst_escribir)


State 45

    8 inst_escribir: ESCRIBIR PI ID PD •

    $default  reduce using rule 8 (inst_escribir)
